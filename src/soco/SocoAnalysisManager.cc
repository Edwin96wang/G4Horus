#include "SocoAnalysisManager.hh"
#include "G4RootFileManager.hh"
#include <memory>

SocoAnalysisManager* SocoAnalysisManager::fgMasterInstance = nullptr;
G4ThreadLocal SocoAnalysisManager* SocoAnalysisManager::fgInstance = nullptr;

SocoAnalysisManager::SocoAnalysisManager(G4bool isMaster)
    : G4VAnalysisManager("Soco", isMaster)
{
    if ((isMaster && fgMasterInstance) || (fgInstance)) {
        G4ExceptionDescription description;
        description
            << "      "
            << "SocoAnalysisManager already exists."
            << "Cannot create another instance.";
        G4Exception("SocoAnalysisManager::SocoAnalysisManager()",
                    "Analysis_F001", FatalException, description);
    }
    if (isMaster)
        fgMasterInstance = this;
    fgInstance = this;

    // A File Manager is needed, we (ab)use the Root one
    // It is basically a glorified file name storage
    SetFileManager(std::make_shared<G4RootFileManager>(fState));
}

SocoAnalysisManager::~SocoAnalysisManager()
{
    if (fState.GetIsMaster()) {
        fgMasterInstance = nullptr;
    }
    fgInstance = nullptr;
}

SocoAnalysisManager* SocoAnalysisManager::Instance()
{
    if (fgInstance == nullptr) {
        G4bool isMaster = !G4Threading::IsWorkerThread();
        fgInstance = new SocoAnalysisManager(isMaster);
    }

    return fgInstance;
}

G4bool SocoAnalysisManager::OpenFileImpl(const G4String& fileName)
{
    fFile.open(fileName + ".evt");
    if (!fFile.is_open()) {
        return false;
    }
    fEvents.clear();
    return true;
}

G4bool SocoAnalysisManager::WriteImpl()
{
    {
        // Header
        SOCO::EventHeader header = {SOCO::SOCO_EVENT_MAGIC, fEvents.size()};
        fFile.write(reinterpret_cast<const char*>(&header), sizeof(header));
    }
    {
        // Metadata
        SOCO::EventMetadataHeader metadata = {SOCO::SOCO_META_MAGIC, 0};
        std::string metadataData("Generated by g4horus");
        metadata.size = metadataData.size();
        fFile.write(reinterpret_cast<const char*>(&metadata), sizeof(metadata));
        fFile.write(metadataData.c_str(), metadataData.size());
    }
    {
        // Data
        fFile.write(reinterpret_cast<const char*>(&SOCO::SOCO_DATA_MAGIC), sizeof(SOCO::SOCO_DATA_MAGIC));
        for (auto& event : fEvents) {
            event.write(fFile);
        }
        fEvents.clear();
    }
    return true;
}

G4bool SocoAnalysisManager::CloseFileImpl()
{
    fFile.close();
    return true;
}

G4bool SocoAnalysisManager::IsOpenFileImpl() const {
    return fFile.is_open();
}

G4bool SocoAnalysisManager::PlotImpl() {
    throw std::runtime_error("SocoAnalysisManager::PlotImpl: Not implemented");
    return true;
}

G4bool SocoAnalysisManager::MergeImpl(tools::histo::hmpi *) {
    throw std::runtime_error("SocoAnalysisManager::MergeImpl: Not implemented");
    return true;
}
