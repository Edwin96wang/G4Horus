#include "SocoAnalysisManager.hh"
#include "G4RootFileManager.hh"
#include <memory>

SocoAnalysisManager* SocoAnalysisManager::gInstance = nullptr;

SocoAnalysisManager* SocoAnalysisManager::Instance()
{
    if (gInstance == nullptr) {
        gInstance = new SocoAnalysisManager();
    }
    return gInstance;
}

SocoAnalysisManager::SocoAnalysisManager()
    : fFileName("soco")
    , fFileMessenger(this)
{
}

G4bool SocoAnalysisManager::Write()
{
    if (!G4Threading::IsMasterThread()) {
        return true;
    }

    std::ofstream file;
    file.open(fFileName + ".evt");
    {
        // Header
        SOCO::EventHeader header = {SOCO::SOCO_EVENT_MAGIC, fEvents.size()};
        file.write(reinterpret_cast<const char*>(&header), sizeof(header));
    }
    {
        // Metadata
        SOCO::EventMetadataHeader metadata = {SOCO::SOCO_META_MAGIC, 0};
        std::string metadataData("Generated by g4horus");
        metadata.size = metadataData.size();
        file.write(reinterpret_cast<const char*>(&metadata), sizeof(metadata));
        file.write(metadataData.c_str(), metadataData.size());
    }
    {
        // Data
        std::lock_guard<std::mutex> lE{fLockEvents};
        file.write(reinterpret_cast<const char*>(&SOCO::SOCO_DATA_MAGIC), sizeof(SOCO::SOCO_DATA_MAGIC));
        for (const auto& event : fEvents) {
            event.write(file);
        }
        fEvents.clear();
    }
    file.close();
    return true;
}

void SocoAnalysisManager::Destroy()
{
    if (G4Threading::IsMasterThread() && gInstance != nullptr) {
        delete gInstance;
        gInstance = nullptr;
    }
}
